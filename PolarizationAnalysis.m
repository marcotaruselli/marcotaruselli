% function PolarizationAnalysisNew(data,fs,timeAx)

function PolarizationAnalysis(data_processing)



% CHECK SE GLI ASSI TEMPORALI SONO GLI STESSI PER LE 3 COMPOENNTI,
% ALTRIMENTI BISOGNA DIRE DI FARE PRIMA IL CUT!!

global mainPolFig
global polPlotParameters
global data_selected

polPlotParameters.axesType = 'Cartesian';
polPlotParameters.freqAxis = 'Linear';
polPlotParameters.freqLim = 'auto';
polPlotParameters.freqTicks = 'auto';
polPlotParameters.colormap = 'jet';
polPlotParameters.colormapRange = 'auto';
polPlotParameters.SVDThetaHRule = '0° = E, increasing counterclockwise';
polPlotParameters.SVDThetaVRule = '0° = Horizontal';
polPlotParameters.SVDPolResults = [];
polPlotParameters.HVSRAngularRule = '0° = E, increasing counterclockwise';
polPlotParameters.rotatedHVSRMean = [];
polPlotParameters.HVSRThetaAx = [];
polPlotParameters.freqAx = [];

fs = data_processing(1).fs;


%% 0) Prima di applicare la funzione controlla che qualche segnale sia stato selezionato!
if logical(evalin('base','~exist(''selected'')')) % Se non sono stati selezionati termina la funzione con questo messaggio di errore
    msgbox('No data have been selected! Please select data from "Signal for processing" list!','Update','error');
    return
else
    selected = evalin('base','selected'); % Se esiste carica la variabile selected dal base-workspace
    if not(size(selected,1) == 3)
        msgbox('You must select 3 signal components! Please select data from "Signal for processing" list!','Update','error');
    return
    end
end

% Seleziono il segnale dalla tabella in MainPassive
selected = evalin('base','selected');
data_selected = data_processing(selected,1); %Segnale selezionato da tabella "Signal for processing"

% Check if the three components have the same time length
if ~isequal(length(data_selected(1).signal),length(data_selected(2).signal),length(data_selected(3).signal))
    beep
    waitfor(msgbox({'The three components must have the same length!'; 'Cut them before proceeding!'},'Update','error'))
    return
end


mainPolFig = figure('units','normalized','outerposition',[0 0 1 1],'WindowState','maximized','menubar','none','toolbar','figure',...
    'numbertitle','off','name','POLARIZATION ANALYSIS');

%% POLARIZATION ALGORITHM -------------------------------------------------
uicontrol('style','text','units','normalized','position',[.001 .96 .11 .03],...
    'string','Polarization Algorithm','horizontalalignment','center','fontunits','normalized','fontsize',.5,'fontweight','bold',...
    'backgroundcolor',[.5 .7 .7])
% Polarization algorithm
uicontrol('style','text','units','normalized','position',[.001 .93 .06 .03],...
    'string','Pol algorithm','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','popupmenu','units','normalized','position',[.062 .935 .05 .028],'tag','polarization_algorithm',...
    'string',{'HV rotate','PCA covariance matrix','SVD spectral matrix','H rotate'},'horizontalalignment','left','fontunits','normalized','fontsize',.5)

%% WINDOWING --------------------------------------------------------------
uicontrol('style','text','units','normalized','position',[.001 .9 .11 .03],...
    'string','Windowing Parameters','horizontalalignment','center','fontunits','normalized','fontsize',.5,'fontweight','bold',...
    'backgroundcolor',[.5 .7 .7])
% Time window
uicontrol('style','text','units','normalized','position',[.001 .87 .06 .03],...
    'string','Time window [s]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .875 .05 .028],'tag','time_window',...
    'string','25','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['The longer the time window, the better the spectral resolution' 10,...
    'The shorter the time window, the better the statistical significance' 10,...
    'The lower relevant frequency is approximately related to 1/(time window/10)'])
% Time window overlap
uicontrol('style','text','units','normalized','position',[.001 .84 .06 .03],...
    'string','Win Overlap [%]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .845 .05 .028],'tag','time_window_overlap',...
    'string','50','horizontalalignment','right','fontunits','normalized','fontsize',.5)
% Time window tapering
uicontrol('style','text','units','normalized','position',[.001 .81 .06 .03],...
    'string','Win Taper','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','popupmenu','units','normalized','position',[.062 .815 .05 .028],'tag','time_window_tapering',...
    'string',{'Hamming','Tukey','Blackmanharris','Hann','None'},'horizontalalignment','right','fontunits','normalized','fontsize',.5)

%% SPECTRAL PARAMETERS ----------------------------------------------------
uicontrol('style','text','units','normalized','position',[.001 .78 .11 .03],...
    'string','Spectral Parameters','horizontalalignment','center','fontunits','normalized','fontsize',.5,'fontweight','bold',...
    'backgroundcolor',[.5 .7 .7])
% Sampling frequency
uicontrol('style','text','units','normalized','position',[.001 .75 .06 .03],...
    'string','Samp Freq [Hz]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .755 .05 .028],'tag','sampling_frequency',...
    'string',num2str(fs),'horizontalalignment','right','fontunits','normalized','fontsize',.5,'enable','off')
% FFT samples
uicontrol('style','text','units','normalized','position',[.001 .72 .06 .03],...
    'string','FFT Samples [-]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .725 .05 .028],'tag','FFT_samples',...
    'string','auto','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['FFT Samples should be equal or greater than (time window*sampling frequency).' 10,...
    'Powers of 2 give better performance of the FFT algorithm.' 10,...
    '''auto'' option: 2^(nextpow2(length(signal)))'])
% Frequency range
uicontrol('style','text','units','normalized','position',[.001 .69 .06 .03],...
    'string','Freq range [Hz]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .695 .05 .028],'tag','frequency_range',...
    'string','auto','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Indicate F1-F2' 10,...
    'The lower limit should be >= 1/(time window/10)' 10,...
    '''auto'' option: range spans from 1/(time window/10) to Fny'])
% Spectral smoothing
uicontrol('style','text','units','normalized','position',[.001 .66 .06 .03],...
    'string','Spect Smoothing','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','popupmenu','units','normalized','position',[.062 .665 .05 .028],'tag','spectral_smoothing',...
    'string',{'None','KonnoOhmachi','Triangular','Rectangular'},'horizontalalignment','right','fontunits','normalized','fontsize',.5)
% Smoothing band
uicontrol('style','text','units','normalized','position',[.001 .63 .06 .03],...
    'string','Smooth Band [Hz]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .635 .05 .028],'tag','smoothing_band',...
    'string','5','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['This parameter applies to Rectangular and Triangular smoothing.' 10,...
    'The value must be > sampling interval of the frequency axis and smaller than the Nyquist frequency.'])
% KonnoOhmachi b value
uicontrol('style','text','units','normalized','position',[.001 .6 .06 .03],...
    'string','KO b value [-]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .605 .05 .028],'tag','ko_b_value',...
    'string','40','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['This parameter applies to KonnoOhmachi smoothing only.' 10,...
    'The value must be 0 < b < 100.' 10,...
    'A value of 40 generally yields satisfactory results.'])

%% SVD PARAMETERS ---------------------------------------------------------
uicontrol('style','text','units','normalized','position',[.001 .57 .11 .03],...
    'string','SVD Parameters','horizontalalignment','center','fontunits','normalized','fontsize',.5,'fontweight','bold',...
    'backgroundcolor',[.5 .7 .7])
% Frequency averages
uicontrol('style','text','units','normalized','position',[.001 .54 .06 .03],...
    'string','Freq Averages [-]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .545 .05 .028],'tag','frequency_averages',...
    'string','20','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Number of spectral matrixes to be averaged before computing polarization parameters with the spectral SVD algorithm' 10,...
    'A value > 1 is mandatory'])
% Beta^2 Axis
uicontrol('style','text','units','normalized','position',[.001 .51 .06 .03],...
    'string','Beta^2 Ax [-]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .515 .05 .028],'tag','beta2_axis',...
    'string','0:0.01:1','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Axis of the degree-of-polarization parameter computed with the spectral SVD algorithm' 10,...
    'Fill in as min:step:max' 10,...
    'Values must be 0<=x<=1'])
% ThetaH Axis
uicontrol('style','text','units','normalized','position',[.001 .48 .06 .03],...
    'string','ThetaH Ax [deg]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .485 .05 .028],'tag','thetaH_axis',...
    'string','0:1:360','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Axis of the azimuthal polarization parameter computed with the spectral SVD algorithm' 10,...
    'Fill in as min:step:max' 10,...
    'Values must be 0°<=x<=360°'])
% ThetaV Axis
uicontrol('style','text','units','normalized','position',[.001 .45 .06 .03],...
    'string','ThetaV Ax [deg]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .455 .05 .028],'tag','thetaV_axis',...
    'string','0:1:90','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Axis of the vertical polarization parameter computed with the spectral SVD algorithm' 10,...
    'Fill in as min:step:max' 10,...
    'Values must be 0°<=x<=90°'])
% PhiHH Axis
uicontrol('style','text','units','normalized','position',[.001 .42 .06 .03],...
    'string','PhiHH Ax [deg]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .425 .05 .028],'tag','phiHH_axis',...
    'string','-180:1:180','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Axis of the horizontal phase lag polarization parameter computed with the spectral SVD algorithm' 10,...
    'Fill in as min:step:max' 10,...
    'Values must be -180°<=x<=180°'])
% PhiVH Axis
uicontrol('style','text','units','normalized','position',[.001 .39 .06 .03],...
    'string','PhiVH Ax [deg]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .395 .05 .028],'tag','phiVH_axis',...
    'string','-90:1:90','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Axis of the vertical-to-horizontal phase lag polarization parameter computed with the spectral SVD algorithm' 10,...
    'Fill in as min:step:max' 10,...
    'Values must be -90°<=x<=90°'])
% Histogram count normalization
uicontrol('style','text','units','normalized','position',[.001 .36 .06 .03],...
    'string','HistCount Norm','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','popupmenu','units','normalized','position',[.062 .365 .05 .028],'tag','hist_count_normalization',...
    'string',{'probability','pdf','count'},'value',1,'horizontalalignment','right','fontunits','normalized','fontsize',.5)

%% H/HVSR PARAMETERS ----------------------------------------------------------
uicontrol('style','text','units','normalized','position',[.001 .33 .11 .03],...
    'string','H/HVSR Parameters','horizontalalignment','center','fontunits','normalized','fontsize',.5,'fontweight','bold',...
    'backgroundcolor',[.5 .7 .7])
% Angular samples
uicontrol('style','text','units','normalized','position',[.001 .3 .06 .03],...
    'string','Ang samples [-]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7])
uicontrol('style','edit','units','normalized','position',[.062 .305 .05 .028],'tag','angular_samples',...
    'string','30','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
    'tooltipstring',['Samples of angular axis for the HV rotate algorithm (divide pi by this number)' 10,...
    'A value > 1 is mandatory'])


% %% FILTERING --------------------------------------------------------------
% uicontrol('style','text','units','normalized','position',[.001 .46 .11 .03],...
%     'string','Filtering','horizontalalignment','center','fontunits','normalized','fontsize',.5,'fontweight','bold',...
%     'backgroundcolor',[.7 .7 .7])
% % Filter type
% uicontrol('style','text','units','normalized','position',[.001 .43 .06 .03],...
%     'string','Filter type','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
%     'backgroundcolor',[.7 .7 .7])
% uicontrol('style','popupmenu','units','normalized','position',[.062 .435 .05 .028],'tag','filter_type',...
%     'string',{'Highpass','Bandpass','None'},'horizontalalignment','right','fontunits','normalized','fontsize',.5)
% % Filter frequency
% uicontrol('style','text','units','normalized','position',[.001 .4 .06 .03],...
%     'string','Filter freq [Hz]','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
%     'backgroundcolor',[.7 .7 .7])
% uicontrol('style','edit','units','normalized','position',[.062 .405 .05 .028],'tag','filter_frequency',...
%     'string','1','horizontalalignment','right','fontunits','normalized','fontsize',.5,...
%     'tooltipstring','Indicate Fcut for Highpass or Fcut1-Fcut2 for Bandpass')


% Wait text
uicontrol('style','text','units','normalized','position',[.12 .005 .11 .03],'string','Please wait...','visible','off','tag','pleaseWait',...
    'horizontalalignment','center','ForegroundColor','w','fontweight','bold','backgroundcolor','r')


%% PUSHBUTTONS ------------------------------------------------------------
% Update Plot
uicontrol('style','pushbutton','units','normalized','position',[.001 .11 .11 .03],...
    'string','Display parameters','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7],'callback','PolUpdatePlot()')
% Save Figure
uicontrol('style','pushbutton','units','normalized','position',[.001 .075 .11 .03],...
    'string','Save Figure','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7],'callback','PolSaveFig')
% Compute
uicontrol('style','pushbutton','units','normalized','position',[.001 .04 .11 .03],...
    'string','Compute','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7],'callback','PolCompute(data_processing(selected,1))')
% Close
uicontrol('style','pushbutton','units','normalized','position',[.001 .005 .11 .03],...
    'string','Close','horizontalalignment','left','fontunits','normalized','fontsize',.5,...
    'backgroundcolor',[.7 .7 .7],'callback','Undo;')


%% PLOT TIME DATA ---------------------------------------------------------
data = [data_processing(selected(1),1).signal data_processing(selected(2),1).signal data_processing(selected(3),1).signal]; 
maxAbs = max(abs(data(:)));
axes('units','normalized','position',[.2 .935 .71 .045])
plot(data(:,1),'-k')
set(gca,'xtick',[],'ylim',[-maxAbs maxAbs],'tag','comp_x')
% axis tight
ylabel('X')
axes('units','normalized','position',[.2 .88 .71 .045])
plot(data(:,2),'-k')
set(gca,'xtick',[],'ylim',[-maxAbs maxAbs],'tag','comp_y')
% axis tight
ylabel('Y')
axes('units','normalized','position',[.2 .825 .71 .045])
plot(data(:,3),'-k')
set(gca,'ylim',[-maxAbs maxAbs],'tag','comp_z')
% axis tight
ylabel('Z')

% set(gca,'xlim',[polPlotParameters.freqLim(1) polPlotParameters.freqLim(2)],'ylim',[0 180*(polPlotParameters.HVSRThetaAx(end))/pi],'tickdir','out','ticklength',[.005 .005],...
%     'box','on','FontUnits','points','fontsize',7,'FontName','Arial','ylim',[0 180])

